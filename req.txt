Adding AutoShape... 
{'imgs': [array([[[  0,  67, 171],
        [  0,  66, 170],
        [  0,  65, 169],
        ...,
        [213, 226, 243],
        [213, 226, 243],
        [213, 226, 243]],

       [[  0,  66, 170],
        [  0,  66, 170],
        [  0,  65, 169],
        ...,
        [213, 226, 243],
        [213, 226, 243],
        [214, 227, 244]],

       [[  0,  66, 170],
        [  0,  66, 170],
        [  0,  66, 170],
        ...,
        [214, 227, 244],
        [214, 227, 244],
        [214, 227, 244]],

       ...,

       [[171, 188, 204],
        [172, 189, 205],
        [173, 190, 206],
        ...,
        [153, 175, 216],
        [148, 169, 212],
        [143, 166, 208]],

       [[165, 182, 198],
        [166, 183, 199],
        [168, 185, 201],
        ...,
        [146, 168, 209],
        [143, 164, 207],
        [140, 163, 205]],

       [[159, 176, 192],
        [160, 177, 193],
        [162, 179, 197],
        ...,
        [142, 164, 205],
        [142, 163, 206],
        [142, 165, 207]]], dtype=uint8)], 
        'pred': [tensor([[  0.00000,  61.09119, 716.06879, 333.51468,   0.75983,   0.00000]])],
         'names': ['iha'], 'files': ['iha.jpg'], 'times': [1651867886.6669862, 1651867886.6766102, 1651867886.7509663, 1651867886.7516646], 
         'xyxy': [tensor([[  0.00000,  61.09119, 716.06879, 333.51468,   0.75983,   0.00000]])], 
         'xywh': [tensor([[358.03439, 197.30293, 716.06879, 272.42349,   0.75983,   0.00000]])],
          'xyxyn': [tensor([[0.00000, 0.15159, 0.99454, 0.82758, 0.75983, 0.00000]])], 'xywhn': [tensor([[0.49727, 0.48959, 0.99454, 0.67599, 0.75983, 0.00000]])],
           'n': 1, 
           't': (9.624004364013672, 74.3560791015625, 0.6983280181884766), 
           's': torch.Size([1, 3, 384, 640])




import torch
import cv2
# Model
# model = torch.hub.load('ultralytics/yolov5', 'yolov5s')  # or yolov5n - yolov5x6, custom
model = torch.hub.load('ultralytics/yolov5','custom', path='./pt/best.pt',force_reload=True)
# Images
img = './images/*'  # or file, Path, PIL, OpenCV, numpy, list

# Inference

# print(results.__dict__)
# print(results.imgs[0])
# Results
 # or .show(), .save(), .crop(), .pandas(), etc.

for i in results.imgs:
    results = model(img)
    results.save() 
    cv2.imshow("canva",results.imgs[0])
cv2.waitKey(0)
cv2.destroyAllWindows()